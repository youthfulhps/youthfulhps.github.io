{"version":3,"sources":["webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/Common/Spacer.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/assets/images/me.png","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/Common/Divider.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/Hero.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/listing.tsx"],"names":["StyledSpacer","styled","height","width","isColorSet","StyledDivider","StyledHeroHeaderWrapper","isDark","StyledDescription","colorMode","useColorMode","src","Me","StyledLayout","Layout","posts","useMinimalBlogConfig","basePath","blogPath","sx","p","fontSize","variant","text","Link","to","replaceSlashes","showTags","props","allPost","data","nodes","tags","tagsPath","map","tag","i","key","slug","as","name","StyledBox","Box","StyledTLink","TLink","post","color","title","mt","a","date","description","StyledListing","className","mb"],"mappings":"iRAYMA,EAAeC,QAAH,kFACN,gBAAGC,EAAH,EAAGA,OAAH,OAAgBA,GAAaA,EAAP,QAClB,qBAAGA,QAAwB,UAChC,gBAAGC,EAAH,EAAGA,MAAH,OAAgBA,EAAWA,EAAN,KAAkB,UAC9C,qBAAGC,WACO,oDAOd,I,EAAA,EAJA,YAAqE,IAAnDF,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,MAA0C,IAAnCC,kBAAmC,SAClE,OAAO,gBAACJ,EAAD,CAAcE,OAAQA,EAAQC,MAAOA,EAAOC,WAAYA,KCrBjE,EAAe,IAA0B,iD,WCGnCC,EAAgBJ,QAAH,0EASnB,I,MAAA,EAJA,WACE,OAAO,gBAACI,EAAD,OCEHC,EAA0BL,QAAH,mNAIb,qBAAGM,QAAa,aAW1BC,GALmBP,QAAH,kEAKIA,QAAH,yFAyBvB,I,EAAA,EApBA,WACE,IAAOQ,GAAaC,UAApB,GACA,OACE,gCACE,gBAACJ,EAAD,CAAyBC,OAAsB,SAAdE,GAC/B,uBAAKE,IAAKC,IACV,gBAAC,EAAD,MACA,gBAAC,EAAD,CAAQT,MAAO,KACf,2BAEE,gBAACK,EAAD,0CAGA,gBAACA,EAAD,+BCdJK,GAAeZ,OAAOa,IAAPb,CAAH,0CA8BlB,EA1BiB,SAAC,GAA2B,IAAzBc,EAAwB,EAAxBA,MAClB,GAA+BC,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAACL,EAAD,MACE,mBACEM,GAAI,CACFC,EAAG,CAAEC,SAAU,CAAC,EAAG,EAAG,IACtBC,QAAQ,kBAGV,QAAC,EAAD,QAEF,QAAC,EAAD,CAAQpB,OAAQ,MAChB,QAAC,IAAD,CAAOqB,KAAK,UACV,QAAC,EAAAC,KAAD,CAAMC,IAAIC,OAAe,IAAIT,EAAL,IAAiBC,OAE3C,QAAC,EAAD,CAAQhB,OAAQ,MAChB,QAAC,IAAD,CAASa,MAAOA,EAAOY,UAAU,MCjDvC,MCQe,YAAuD,IAAjBC,EAAgB,oBAEzDC,EACND,EADFE,KAAQD,QAGV,OAAO,gBAAC,EAAD,eAAUd,MAAOc,EAAQE,OAAWH,M,4FCc7C,IAjBiB,SAAC,GAAyB,IAAvBI,EAAsB,EAAtBA,KAClB,GAA+BhB,SAAvBiB,EAAR,EAAQA,SAAUhB,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGe,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,KACD,gBAAC,KAAD,CAAOG,GAAIf,OAAMC,IAAIC,OAAe,IAAIT,EAAL,IAAiBgB,EAAjB,IAA6BE,EAAIG,OACjEH,EAAIK,a,uKCCXC,GAAYxC,OAAOyC,KAAPzC,CAAH,mIAOT0C,GAAc1C,OAAO2C,KAAP3C,CAAH,+NAWXO,EAAoBP,MAAH,2MA+CvB,EArCqB,SAAC,GAAD,IAAG4C,EAAH,EAAGA,KAAH,IAASlB,gBAAT,gBACnB,QAACc,EAAD,MACE,QAACE,EAAD,CACEJ,GAAIf,OACJC,GAAIoB,EAAKP,KACTnB,GAAI,CAAEE,SAAU,CAAC,EAAG,EAAG,GAAIyB,MAAM,SAEhCD,EAAKE,QAER,aACE5B,GAAI,CACF2B,MAAM,YACNE,GAAI,EACJC,EAAG,CAAEH,MAAM,aACXzB,SAAU,CAAC,EAAG,EAAG,MAGnB,oBAAOwB,EAAKK,MACXL,EAAKb,MAAQL,IACZ,QAAC,WAAD,YAEE,QAAC,IAAD,CAAUK,KAAMa,EAAKb,UAI3B,QAACxB,EAAD,CACEW,GAAI,CACF2B,MAAM,YACNE,GAAI,EACJC,EAAG,CAAEH,MAAM,eAGZD,EAAKM,eC1DNC,EAAgBnD,YAAH,wHACH,qBAAGM,QAAa,aAqBhC,EAhBgB,SAAC,GAA8D,IAA5DQ,EAA2D,EAA3DA,MAA2D,IAApDsC,iBAAoD,eAApC1B,gBAAoC,SACrElB,GAAaC,UAApB,GAEA,OACE,QAAC0C,EAAD,CACE7C,OAAsB,SAAdE,EACRU,GAAI,CAAEmC,GAAI,CAAC,EAAG,EAAG,IACjBD,UAAWA,GAEVtC,EAAMmB,KAAI,SAACW,GAAD,OACT,QAAC,EAAD,CAAcR,IAAKQ,EAAKP,KAAMO,KAAMA,EAAMlB,SAAUA","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-2b59f6463ee8d5cc2e7b.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\ntype SpacerProps = {\n  /**여백의 높이 */\n  height?: number;\n  /**여백의 너비 */\n  width?: number;\n  /**여백의 색상 여부를 결정합니다. */\n  isColorSet?: boolean;\n};\n\nconst StyledSpacer = styled.div<SpacerProps>`\n  height: ${({ height }) => height && `${height}px`};\n  min-height: ${({ height }) => !height && \"100%\"};\n  width: ${({ width }) => (width ? `${width}px` : \"100%\")};\n  ${({ isColorSet }) =>\n    isColorSet ? `background-color: var(--element-light-gray)` : ``}\n`;\n\nfunction Spacer({ height, width, isColorSet = false }: SpacerProps) {\n  return <StyledSpacer height={height} width={width} isColorSet={isColorSet} />;\n}\n\nexport default Spacer;\n","export default __webpack_public_path__ + \"static/me-310999d3a5bdf70958e837256fe1e262.png\";","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst StyledDivider = styled.div`\n  height: auto;\n  border-left: 3px solid black;\n`;\n\nfunction Divider() {\n  return <StyledDivider />;\n}\n\nexport default Divider;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Me from \"../assets/images/me.png\";\nimport Spacer from \"./Common/Spacer\";\nimport { useColorMode } from \"theme-ui\";\nimport Divider from \"./Common/Divider\";\n\ntype StyledHeroHeaderWrapperProps = {\n  isDark: boolean;\n};\n\nconst StyledHeroHeaderWrapper = styled.div<StyledHeroHeaderWrapperProps>`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  background: ${({ isDark }) => !isDark && `#ffffff`};\n  box-shadow: 0px 2px 20px rgba(62, 74, 107, 0.08);\n  border-radius: 16px;\n  width: 100%;\n`;\n\nconst StyledHeroHeader = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n`;\n\nconst StyledDescription = styled.div`\n  font-size: 16px;\n  color: var(--theme-ui-colors-secondary);\n`;\n\nfunction Hero() {\n  const [colorMode] = useColorMode();\n  return (\n    <>\n      <StyledHeroHeaderWrapper isDark={colorMode === \"dark\"}>\n        <img src={Me} />\n        <Divider />\n        <Spacer width={32} />\n        <div>\n          {/* <StyledHeroHeader></StyledHeroHeader> */}\n          <StyledDescription>\n            옛 장인들은 자신의 작품에 서명하는 것을 자랑스러워했습니다.\n          </StyledDescription>\n          <StyledDescription>가치 있는 개인 기록을 남깁니다.</StyledDescription>\n        </div>\n      </StyledHeroHeaderWrapper>\n    </>\n  );\n}\n\nexport default Hero;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport Layout from \"./layout\";\nimport Title from \"./title\";\nimport Listing from \"./listing\";\nimport List from \"./list\";\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\";\nimport replaceSlashes from \"../utils/replaceSlashes\";\nimport Spacer from \"./Common/Spacer\";\nimport Hero from \"../components/Hero\";\nimport styled from \"@emotion/styled\";\n// @ts-ignore\n\ntype PostsProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  [key: string]: any;\n};\n\nconst StyledLayout = styled(Layout)`\n  display: grid;\n`;\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig();\n\n  return (\n    <StyledLayout>\n      <section\n        sx={{\n          p: { fontSize: [1, 2, 3] },\n          variant: `section_hero`,\n        }}\n      >\n        <Hero />\n      </section>\n      <Spacer height={32} />\n      <Title text=\"BLOGS\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)} />\n      </Title>\n      <Spacer height={32} />\n      <Listing posts={posts} showTags={false} />\n      {/* <List sx={{ variant: `section_bottom` }}>\n        <Bottom />\n      </List> */}\n    </StyledLayout>\n  );\n};\n\nexport default Homepage;\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","import * as React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport * as React from \"react\";\nimport { jsx, Link as TLink, Box } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport ItemTags from \"./item-tags\";\nimport styled from \"@emotion/styled\";\n\ntype BlogListItemProps = {\n  post: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  };\n  showTags?: boolean;\n};\n\nconst StyledBox = styled(Box)`\n  margin-bottom: 0;\n  /* border-bottom: 1px solid black; */\n  min-height: 135px;\n  padding: 24px 12px;\n`;\n\nconst StyledTLink = styled(TLink)`\n  display: block;\n  font-weight: 700;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nconst StyledDescription = styled.p`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n  font-size: 14px;\n`;\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <StyledBox>\n    <StyledTLink\n      as={Link}\n      to={post.slug}\n      sx={{ fontSize: [1, 2, 3], color: `text` }}\n    >\n      {post.title}\n    </StyledTLink>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n    <StyledDescription\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n      }}\n    >\n      {post.description}\n    </StyledDescription>\n  </StyledBox>\n);\n\nexport default BlogListItem;\n","/** @jsx jsx */\nimport { jsx, useColorMode } from \"theme-ui\";\nimport BlogListItem from \"./blog-list-item\";\nimport styled from \"@emotion/styled\";\n\ntype StyledListingProps = {\n  isDark: boolean;\n};\n\ntype ListingProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  className?: string;\n  showTags?: boolean;\n};\nconst StyledListing = styled.section<StyledListingProps>`\n  background: ${({ isDark }) => !isDark && `#ffffff`};\n  box-shadow: 0px 2px 20px rgba(62, 74, 107, 0.1);\n  border-radius: 16px;\n`;\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => {\n  const [colorMode] = useColorMode();\n\n  return (\n    <StyledListing\n      isDark={colorMode === \"dark\"}\n      sx={{ mb: [5, 6, 7] }}\n      className={className}\n    >\n      {posts.map((post) => (\n        <BlogListItem key={post.slug} post={post} showTags={showTags} />\n      ))}\n    </StyledListing>\n  );\n};\n\nexport default Listing;\n"],"sourceRoot":""}