{"version":3,"sources":["webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack://minimal-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/listing.tsx"],"names":["name","Text","props","console","warn","layoutProps","_frontmatter","MDXContent","components","mdxType","sx","fontSize","fontWeight","color","isMDXComponent","posts","useMinimalBlogConfig","basePath","blogPath","siteTitle","useSiteMetadata","visuallyHidden","mb","p","mt","variant","text","Link","to","replaceSlashes","showTags","allPost","data","nodes","tags","tagsPath","map","tag","i","key","slug","as","StyledBox","styled","Box","StyledTLink","TLink","StyledDescription","post","title","a","date","description","StyledListing","isDark","className","colorMode","useColorMode"],"mappings":"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","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-260db19bd380809ee07e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: `bold`,\n      color: `heading`\n    }} mdxType=\"Text\">\n  브랜든 기술 블로그입니다\n    </Text>\n    <p>{`옛 장인들은 자신의 작품에 서명하는 것을 자랑스러워했습니다, 가치 있는 개인 기록을 남깁니다.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport Layout from \"./layout\";\nimport Title from \"./title\";\nimport Listing from \"./listing\";\nimport List from \"./list\";\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\";\nimport useSiteMetadata from \"../hooks/use-site-metadata\";\nimport replaceSlashes from \"../utils/replaceSlashes\";\nimport { visuallyHidden } from \"../styles/utils\";\n// import Hero from \"../components/Hero\";\n// @ts-ignore\nimport Hero from \"../texts/hero\";\n// @ts-ignore\nimport Bottom from \"../texts/bottom\";\n\ntype PostsProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  [key: string]: any;\n};\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig();\n  const { siteTitle } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section\n        sx={{\n          mb: [4, 5, 6],\n          p: { fontSize: [1, 1, 2], mt: 2 },\n          variant: `section_hero`,\n        }}\n      >\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>\n          Read all posts\n        </Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      {/* <List sx={{ variant: `section_bottom` }}>\n        <Bottom />\n      </List> */}\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","import * as React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport * as React from \"react\";\nimport { jsx, Link as TLink, Box } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport ItemTags from \"./item-tags\";\nimport styled from \"@emotion/styled\";\n\ntype BlogListItemProps = {\n  post: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  };\n  showTags?: boolean;\n};\n\nconst StyledBox = styled(Box)`\n  margin-bottom: 0;\n  /* border-bottom: 1px solid black; */\n  min-height: 135px;\n  padding: 24px 12px;\n`;\n\nconst StyledTLink = styled(TLink)`\n  display: block;\n  font-weight: 700;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nconst StyledDescription = styled.p`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n  font-size: 14px;\n`;\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <StyledBox>\n    <StyledTLink\n      as={Link}\n      to={post.slug}\n      sx={{ fontSize: [1, 2, 3], color: `text` }}\n    >\n      {post.title}\n    </StyledTLink>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n    <StyledDescription\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n      }}\n    >\n      {post.description}\n    </StyledDescription>\n  </StyledBox>\n);\n\nexport default BlogListItem;\n","/** @jsx jsx */\nimport { jsx, useColorMode } from \"theme-ui\";\nimport BlogListItem from \"./blog-list-item\";\nimport styled from \"@emotion/styled\";\n\ntype StyledListingProps = {\n  isDark: boolean;\n};\n\ntype ListingProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  className?: string;\n  showTags?: boolean;\n};\nconst StyledListing = styled.section<StyledListingProps>`\n  background: ${({ isDark }) => !isDark && `#ffffff`};\n  /* box-shadow: 0px 2px 20px rgba(62, 74, 107, 0.1); */\n  border-radius: 16px;\n`;\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => {\n  const [colorMode] = useColorMode();\n\n  return (\n    <StyledListing\n      isDark={colorMode === \"dark\"}\n      sx={{ mb: [5, 6, 7] }}\n      className={className}\n    >\n      {posts.map((post) => (\n        <BlogListItem key={post.slug} post={post} showTags={showTags} />\n      ))}\n    </StyledListing>\n  );\n};\n\nexport default Listing;\n"],"sourceRoot":""}