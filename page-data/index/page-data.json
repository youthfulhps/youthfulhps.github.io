{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Youthfulhps.dev","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"브라우저는 단일 스레드에서 이벤트 드리븐(event-driven) 방식으로 동작한다. 단일 스레드는 한번에 하나의 작업만을 처리할 수 있지만, 웹은 마치 여러 작업을\n동시에 처리하는 것처럼 보인다. 이처럼 자바스크립트의 동시성을 구현하는 방식이 이벤트 루프이다. 자바스크립트 엔진은 단순히 작업이 요청되면 콜스택을 사용하여 요청된 작업을 순서대로 실행하는 …","fields":{"slug":"/TIL/javascript/event-loop/"},"frontmatter":{"date":"October 06, 2023","title":"이벤트 루프","description":"이벤트 루프","category":"javascript","draft":false,"type":"TIL"}}},{"node":{"excerpt":"모든 실행 가능한 코드(전역, 함수, eval, 모듈)는 코드 실행 이전에 평가 단계를 거치는데, 이는 실행 가능한 코드가\n실행되기 위한 환경을 생성하기 위함이다. 평가 과정을 거쳐 생성된 실행 환경을 물리적인 객체로 관리하며 이를 실행 컨텍스트라 한다.\n해당 코드의 식별자(변수, 함수, 클래스 등의 이름)을 등록하고 관리하는 스코프를 렉시컬 환경에서 관…","fields":{"slug":"/TIL/javascript/execution-context/"},"frontmatter":{"date":"October 04, 2023","title":"실행 컨텍스트","description":"자바스크립트 실행 컨텍스트","category":"javascript","draft":false,"type":"TIL"}}},{"node":{"excerpt":"tailwind-converter 라이브러리를 릴리즈하게 되었다.\nstyled-components를 통해 정의된 코드레벨의 컴포넌트 스타일을 추출하여\ntailwindCSS에서 제공하는 유틸리티 클래스로 변환하고, 해당 컴포넌트의 사용처를 찾아 변환된 스타일 클래스들을 할당,\n최종적으로 코드를 반환하는 도구이다. before\n after\n 간단한 예제에서는…","fields":{"slug":"/development/tailwind-converter/"},"frontmatter":{"date":"September 05, 2023","title":"tailwind-converter 제작기","description":"아직은 미숙합니다.","category":"development","draft":false,"type":null}}},{"node":{"excerpt":"TL;TR 클로저는 자신이 생성될 때의 스코프에서 알 수 있었던 변수 중 언젠가 자신이 실행될 때 사용할 변수들만 기억하여 유지시키는 함수다. 이는 자바스크립트에서의 함수가 일급 객체(함수)로 평가되어 함수의 반환값으로 사용될 수 있는 특성과, 클로저라 칭하는 내부 함수 객체가\n생성될 때 [Environment] 내부 슬롯이 현재 실행되고 있는 실행 컨텍…","fields":{"slug":"/TIL/javascript/closure/"},"frontmatter":{"date":"August 10, 2023","title":"클로저","description":"클로저","category":"javascript","draft":false,"type":"TIL"}}},{"node":{"excerpt":"자바스크립트의 this는 함수가 어떻게 호출되는지에 따라 동적으로 할당된다. 함수가 생성자 함수로서 호출되었다면, new 키워드를 통해 새롭게 생성된 객체에 this가 바인딩된다. 함수가 객체의 메서드로서 호출되었다면, 해당 메서드를 소유하는 객체에 this가 바인딩된다. apply, call, bind를 통해 함수에 전달된 thisArg 객체에 this…","fields":{"slug":"/TIL/javascript/this/"},"frontmatter":{"date":"June 10, 2023","title":"함수 호출 방식에 따라 동적으로 결정되는 this","description":"자바스크립트 this","category":"javascript","draft":false,"type":"TIL"}}},{"node":{"excerpt":"벌써 2023년 상반기가 지나갔다. 정말 정신없이 시간이 빠르게 흐르는 것 같아, 지나간 시간에 대한\n회고와 함께 남은 하반기에 대한 목표 정리와 계획을 간단히 정리해 보려 한다. 사실 회고록을 적겠노라 시도한 적이 여러 번 있었지만 투박한 글 솜씨와 밋밋한 인생사에 접었던 적이 많았는데,\n이번 상반기는 더 바쁘고 엄격하게, 그럼에도 더 행복한 하반기를 …","fields":{"slug":"/essay/2023-first-half-retrospect/"},"frontmatter":{"date":"May 14, 2023","title":"2023 상반기 회고","description":"왜이렇게 즐거운진 나도 몰라요.","category":"essay","draft":false,"type":null}}},{"node":{"excerpt":"리엑트 동시성 기능을 공부하면서 어렵고 복잡한 메커니즘이지만, 결국 사용자 경험을 개선하기 위한 목표들을 추상화해서\n기술적으로 풀어낸 결과물이라고 생각하면 꽤나 여운이 남습니다. 가령 현재 실행권을 가지고 있는 무거운 랜더링 연산 작업을 진행하면서도, 작업 처리 우선순위가 높은 사용자 이벤트에\n대한 처리 작업이 들어와 대기 중이라면, 진행 중인 작업을 즉…","fields":{"slug":"/react/concurrent-feature-hooks/"},"frontmatter":{"date":"April 24, 2023","title":"긴급한 작업에 낮은 우선순위를 부여하는 리엑트 훅","description":"잠시 대기!","category":"react","draft":false,"type":null}}},{"node":{"excerpt":"최근 정규 표현식을 마주하는 일이 잦아진 것 같습니다. 주로 문자열의 유효성 검사를\n위해 작성되었던 정규 표현식들과, 에디터에서 특정 문자열 검색을 위해 정규식 검색을\n사용하곤 했는데요. 사실 정규 표현식을 사용할 때면, 이미 작성되어 있는 표현식들을 꿰맞추어 사용하거나,\n구글링해야 하는 경우가 부지기수였습니다. 해서 거창한 이유보다는, 잘 사용해 보고 …","fields":{"slug":"/javascript/regular-expression/"},"frontmatter":{"date":"December 07, 2022","title":"효율적인 문자열 검색을 위한 정규 표현식","description":"해석되어가고 있는 척 그만하고 싶어요.","category":"development","draft":false,"type":null}}},{"node":{"excerpt":"보통 어플리케이션에서 최적화를 위해 메모이제이션 기법을 통해 이전에 계산한 값을 메모리에\n저장해두고, 동일하게 다시 사용할 수 있는 곳에서 재사용하여 반복적으로 발생하는 계산의\n리소스를 줄이는 기법을 사용하곤 합니다. 리엑트에서도 메모이제이션을 쉽게 구현할 수 있도록 도와주는 API들이 존재하는데요.\n리엑트 공식문서에서 우리가 잘 알고 있는 useMemo…","fields":{"slug":"/react/memoization/"},"frontmatter":{"date":"September 21, 2022","title":"리엑트 메모이제이션 셀프 코칭","description":"리엑트 최적화, 적절하게 잘하고 계시나요?","category":"react","draft":false,"type":null}}},{"node":{"excerpt":"개인적으로 타입스크립트는 실무에서 사용하면서 익히기 시작해서\n약 2년 가까이 매일 사용하는 언어가 되었습니다.\n타입스크립트로 시작한 프로젝트도 있었던 반면, 자바스크립트에서\n타입스크립트로 마이그레이션해야 하는 프로젝트들도 있었는데요. 타입스크립트는 단순히 ‘자바스크립트에 타입을 부여한 언어’ 라고 생각할 수 있지만,\n최근 몇 개월동안 어설프게 시작한 타입…","fields":{"slug":"/typescript/typescript-essentials-you-should-know/"},"frontmatter":{"date":"June 14, 2022","title":"타입스크립트, 글로 배웠습니다만","description":"단순히 자바스크립트에 타입을 부여한 언어라고 생각하고 싶지 않았어요.","category":"typescript","draft":false,"type":null}}},{"node":{"excerpt":"리엑트v18에서 동시성 기능을 정식으로 출시하였습니다. 대표적으로,\nAutomatic batching for fewer renders, SSR support for\nSuspense, Fixes for Suspense behavior quirks와 같은 내부적인\n성능 향상과, startTransition, useDeferredValue, SuspenseLi…","fields":{"slug":"/react/react-concurrent-mode-01/"},"frontmatter":{"date":"June 11, 2022","title":"리엑트 동시성 매커니즘들은 어떻게 구현되어 있을까 - 01","description":"5년이라는 시간을 투자한 리엑트 동시성 기능의 정식 릴리즈, 결국 george지는 건 나.","category":"react","draft":false,"type":null}}},{"node":{"excerpt":"클라이언트를 개발하면서 HTTP Cache-Control Extensions for Stale Content의\n 확장 디렉티브 전략을 기반으로한\n구현체들을 많이 접하게 되는데요. swr 전략은 무엇인지, 어떻게 활용되고 있는 지\n알아보려 합니다. stale-while-revalidate swr 전략은 캐싱된 컨텐츠를 즉시 로드하는 즉시성과 업데이트된 캐싱…","fields":{"slug":"/web/stale-while-ravalidate/"},"frontmatter":{"date":"June 01, 2022","title":"stale-while-revalidate 전략은 어떻게 활용되고 있을까","description":"심심찮게 등장하는 swr 캐싱 전략을 간단하게 살펴봅니다.","category":"web","draft":false,"type":null}}},{"node":{"excerpt":"사용자 경험 품질 향상을 위한 이미지 최적화에서 온디멘드 이미지 리사이징\n에 대한 이야기를 공유해드렸습니다. 이번 글에서는 CloudFront에서  를 통해 직접 구현해본 과정을 정리해보려 합니다. TL;DR S3 버킷을 생성하고 이미지를 업로드합니다. CloudFront를 통해 S3 컨텐츠를 배포합니다. 라시아징, webp 파일 형식 변환을 위한 노드 …","fields":{"slug":"/infra/image-optimization-with-cloudfront/"},"frontmatter":{"date":"May 31, 2022","title":"온디멘드 이미지 리사이징을 위한 인프라 구성","description":"모바일 환경이라면 이미지 사이즈를 줄여 보내주세요.","category":"infra","draft":false,"type":null}}},{"node":{"excerpt":"많은 이미지를 다루는 페이지의 경우, 이미지 최적화에 신경쓰지 않으면 사용자 경험 지표에서 많은 감점을 받기 쉽습니다.\n사용자 경험 지표를 측정해보면, 이미지 관련된 감점 요소들이 정말 많은데요. Properly size images Serve images in next-gen formats Defer offscreen images Image elemen…","fields":{"slug":"/web/image-optimization/"},"frontmatter":{"date":"May 29, 2022","title":"사용자 경험 품질 향상을 위한 이미지 최적화","description":"브라우저에게 예쁨 받는 이미지를 랜더링하기 위한 최소한의 노력","category":"web","draft":false,"type":null}}},{"node":{"excerpt":"자바스크립트는 프로토타입 기반의 객체 지향 프로그래밍 언어입니다. 개인적으로 프로토타입에 대한 큰 그림을 이해하고 있다고 생각했는데,\n이직을 준비하면서 프로토타입만 마주하면 작아지는 제 모습을 보게 됩니다. 자연스레 프로토타입 객체로부터 상속받은 메서드를 사용하면서도, 직접 프로토타입 객체를 다룰 기회는 적었는데요.\n어쩌면 가장 익숙하지만 낯선 프로토타입…","fields":{"slug":"/javascript/javascript-prototype/"},"frontmatter":{"date":"March 19, 2022","title":"자바스크립트 프로토타입 톺아보기","description":"프로토타입이 그러니까 이게 뭐냐면..","category":"javascript","draft":false,"type":null}}},{"node":{"excerpt":"최근 CRA 프로젝트를 넥스트로 이관하는 작업이 한창입니다. 넥스트는 서버 사이드 랜더링과 동시에 클라이언트 사이드 랜더링을\n동시에 지원하기 때문에 점진적 이관이 가능했죠. 단순히 빌드가 실패되는 문제들을 제외하면요. 이후 적절한 , ,  를 통해 서버 사이드에서 데이터 패칭이\n이루어질 수 있도록 작업했습니다. 작업할 때 서버 사이드 랜더링()보다는 정적…","fields":{"slug":"/nextjs/next-isr/"},"frontmatter":{"date":"January 08, 2022","title":"Incremental Static Regeneration 타임라인 이해하기","description":"증분 정적 생성의 타임라인을 살펴봅니다.","category":"nextjs","draft":false,"type":null}}},{"node":{"excerpt":"웹 개발을 하면서 정량적인 지표를 보는 것에 재미가 들린 요즘, 지표는\n엄청난 동기를 부여하곤 합니다.\n최근 Lighthouse로\n프러덕션의 사용자 경험에 대한 점수가 여럿 빨간불을 켜고 있는 것을 보고는\n이제 더 이상 최적화를 미룰 수 없겠다는 생각이 들게 되었는데요. 현재 프러덕션은 클라이언트 사이드에서 랜더링을 담당하고 있기 때문에\n검색 엔진 최적화…","fields":{"slug":"/nextjs/cra-to-next/"},"frontmatter":{"date":"December 26, 2021","title":"CRA 프로젝트를 next.js로 전환해보자","description":"빌드 이슈는 고개를 들어주세요.","category":"nextjs","draft":false,"type":null}}},{"node":{"excerpt":"리덕스 사가는 ES6에 새롭게 도입된 제네레이터 (Generator) 문법을 사용하여 유용하게 비동기 처리를 할 수 있게 해줍니다.\n현재 운영 중인 프러덕션 또한, 리덕스에서 사이드 이펙트가 존재할 만한 비동기적인 비지니스 로직을 관리하기 위해 리덕스 사가 미들웨어를 사용하고 있는데요. 늘 사용하고 있는 문법이고 동작 또한 해석이 되니 작업에 문제는 없지…","fields":{"slug":"/javascript/do-I-know-javascript-generator/"},"frontmatter":{"date":"November 21, 2021","title":"나는 제네레이터를 알고 사용하는 걸까?","description":"자바스크립트의 제네레이터 문법을 되새겨봅니다.","category":"javascript","draft":false,"type":null}}},{"node":{"excerpt":"사내에서 사용되는 클라이언트 인프라는 이미 구축되어 있는 경우가 많아\n직접 호스팅해볼 기회가 없었는데, 마침 웹 채팅 기능이 담긴 새로운 도메인을\n호스팅할 기회가 생겨 그 과정을 정리해볼까 합니다. S3, 빌드된 정적파일 업로드하기 S3는 클라우드 스토리지 서비스입니다.\n우선, S3의 컨테이너인 버킷을 생성하고 프로젝트의 빌드된 파일을 업로드합니다.  하…","fields":{"slug":"/infra/hosting-cra-on-aws/"},"frontmatter":{"date":"August 10, 2021","title":"AWS를 통해 클라이언트 호스팅하기","description":"AWS를 통해 클라이언트를 호스팅해본 경험을 공유합니다.","category":"infra","draft":false,"type":null}}}]}},"pageContext":{}},"staticQueryHashes":["2486386679","3128451518"]}