{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript-checklist-you-should-know/","result":{"data":{"site":{"siteMetadata":{"title":"Youthfulhps.dev","author":"youthfulhps","siteUrl":"https://youthfulhps.dev","comment":{"disqusShortName":"youthfulhps","utterances":"youthfulhps/youthfulhps.github.io"},"sponsor":{"buyMeACoffeeId":"youthfulhps"}}},"markdownRemark":{"id":"7cadced7-6301-5403-bfc3-9badb41cd6d4","excerpt":"단순히 자바스크립트에 타입을 명시한다고 해서 타입스크립트 개발자라고\n치환되면 안된다 라고 생각합니다.…","html":"<p>단순히 자바스크립트에 타입을 명시한다고 해서 타입스크립트 개발자라고\n치환되면 안된다 라고 생각합니다.</p>\n<h2 id=\"1-코드-생성과-타입-체크는-독립적이다\" style=\"position:relative;\"><a href=\"#1-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC%EB%8A%94-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9D%B4%EB%8B%A4\" aria-label=\"1 코드 생성과 타입 체크는 독립적이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 코드 생성과 타입 체크는 독립적이다</h2>\n<p>타입스크립트 컴파일러는 크게 두 가지 역할을 합니다. 최신 자바스크립트\n/ 타입스크립트를 브라우저에서 동작할 수 있도록 구 버전의 자바스크립트로\n트랜스파일하고, 코드의 타입 오류를 체크하는 역할을 합니다.</p>\n<p>여기서, <strong>타입스크립트 컴파일러의 두 가지 역할은 서로 완벽히 독립적입니다.</strong>\n타입스크립트가 자바스크립트로 변환될 때 타입에는 영향을 주지 않으며\n반대로, 타입은 자바스크립트 런타임에 영향을 미치지 않습니다.</p>\n<p>아래의 코드는 타입 체커에게 다음과 같은 지적을 받지만,\n자바스크립트 코드로서 문법적 오류가 없다면, 문제없이 컴파일됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// main.ts</span>\n<span class=\"token keyword\">let</span> greetings <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\ngreetings <span class=\"token operator\">=</span> <span class=\"token number\">1234</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">~$ tsc main.ts\nmain.ts:2:1 -error <span class=\"token punctuation\">..</span>. <span class=\"token string\">'1234'</span> 형식은 <span class=\"token string\">'string'</span> 형식에 할당할 수 없습니다.</code></pre></div>\n<p>타입 체크에는 문제가 있지만, 컴파일이 수행되는 타입스크립트의\n독립적 기능 수행은 타입 체크의 오류 여부와 상관없이 컴파일된\n결과를 만들어낼 수 있다는 점에서 어플리케이션 운영 단계에서\n도움이 됩니다.</p>\n<h2 id=\"2-런타임에서-타입-구문은-제거-가능-하다\" style=\"position:relative;\"><a href=\"#2-%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85-%EA%B5%AC%EB%AC%B8%EC%9D%80-%EC%A0%9C%EA%B1%B0-%EA%B0%80%EB%8A%A5-%ED%95%98%EB%8B%A4\" aria-label=\"2 런타임에서 타입 구문은 제거 가능 하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 런타임에서 타입 구문은 ‘제거 가능’ 하다</h2>\n<p>타입 구문은 자바스크립트로 컴파일되는 과정에서 모두 제거됩니다.\n즉, <strong>런타임에는 타입 체크가 불가능하며 타입은 런타임에 아무런\n영향을 끼치지 않습니다.</strong></p>\n<p>아래의 코드에서 <code class=\"language-text\">instanceof</code> 체크는 런타임에 일어나지만,\n<code class=\"language-text\">Rectangle</code>은 타입이기 때문에 런타임 시점에 아무런 역할을\n할 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape <span class=\"token operator\">*</span> height\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>런타임에 타입 정보를 유지하고자 한다면 속성의 존재 여부를\n알아보거나, 런타임에 접근 가능한 접근 정보를 명시하는\n‘태그’ 기법을 활용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//tag</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//tag</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'rectangle'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스 문법은 자바스크립트 런타임에서 동작하는 실제 함수이지만,\n타입으로도 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape <span class=\"token operator\">*</span> height\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-덕-타이핑-기반-자바스크립트를-모델링한다\" style=\"position:relative;\"><a href=\"#3-%EB%8D%95-%ED%83%80%EC%9D%B4%ED%95%91-%EA%B8%B0%EB%B0%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EB%AA%A8%EB%8D%B8%EB%A7%81%ED%95%9C%EB%8B%A4\" aria-label=\"3 덕 타이핑 기반 자바스크립트를 모델링한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 덕 타이핑 기반 자바스크립트를 모델링한다</h2>\n<p>타입스크립트는 덕 타이핑(duck typing) 기반 자바스크립트를\n모델링하기 위해 구조적 타이핑을 사용합니다. 여기서\n<a href=\"https://ko.wikipedia.org/wiki/%EB%8D%95_%ED%83%80%EC%9D%B4%ED%95%91\">덕 타이핑</a>은\n동적 타이핑의 한 종류로, 객체의 변수 및 메서드의 집합이\n객체의 타입을 결정하는 것을 말합니다.</p>\n<p>아래의 코드는 타입스크립트의 구조적 타이핑을 나타내는 예시입니다.\n<code class=\"language-text\">Rectangle</code>과 <code class=\"language-text\">NamedRectangle</code>는 서로 무관하지만,\n<code class=\"language-text\">calculateArea</code>의 매개변수로 <code class=\"language-text\">NamedRectangle</code> 타입을\n사용해도 정상적으로 동작합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedRectangle</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token operator\">:</span> Rectangle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> rectangle<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> rectangle<span class=\"token punctuation\">.</span>height\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> rectangle<span class=\"token operator\">:</span> NamedRectangle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'namedRectangle'</span><span class=\"token punctuation\">,</span>\n  width<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">)</span></code></pre></div>\n<p>즉 같은 메서드와 맴버변수를 포함하고 있는 동일한 구조의 두 타입은\n같은 것으로 취급됩니다.</p>\n<p>이러한 관점에서 함수를 작성할 때 호출에 사용되는 매개변수의 속성들이\n선언된 타입에 국한되어 있지 않고 ‘열려 (open)’ 있음을 인지해야\n합니다.</p>\n<h2 id=\"4-type-interface의-차이를-이해하고-일관성을-유지해야-한다\" style=\"position:relative;\"><a href=\"#4-type-interface%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%9D%BC%EA%B4%80%EC%84%B1%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"4 type interface의 차이를 이해하고 일관성을 유지해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. type, interface의 차이를 이해하고 일관성을 유지해야 한다</h2>\n<p>type, interface를 통해 명명된 타입을 정의할 수 있으며,\n일반적으로 두 방법 모두 사용가능합니다. 하지만, 그 차이점을\n이해하고 일관성을 유지하도록 노력해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>type과 interface 모두 추가적인 속성을 할당하면 동일한\n오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> TState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  organization<span class=\"token operator\">:</span> <span class=\"token string\">'fastfive'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~ Type ... is not assignable to type 'TState'</span>\n  <span class=\"token comment\">//      Object literal may only specify known properties, and</span>\n  <span class=\"token comment\">//     'organization' does not exist in type 'TState'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TDict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 방법 모두 인덱스 시그니처, 함수 타입, 제너릭이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//index signature</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TDict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//function type</span>\n<span class=\"token class-name\"><span class=\"token keyword\">type</span></span> <span class=\"token function-variable function\">TFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//generic</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반면에 type과 interface는 서로 확장 가능하나,\n인터페이스는 복잡한 타입(유니온 타입, 원시값, 템플릿 리터럴,\n튜플 등)은 확장하지 못합니다.\n복잡한 타입을 확장하고 싶다면 타입과 &#x26;(intersection)을 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AorB</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">VariableMap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Input <span class=\"token operator\">|</span> Output\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedVariable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Input <span class=\"token operator\">|</span> Output<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>type은 튜플과 배열 타입도 간결하게 표현할 수 있습니다.\n물론 interface로도 구현이 가능하지만, 튜플에서\n사용할 수 있는 concat과 같은 메서드를 사용할 수 없게 됩니다.\n즉, 튜플은 type을 통해 구현하는 것이 낫습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pair</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedNums</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>반면 인터페이스는 속성을 확장하는 ‘선언 병합’\n을 통해 보강이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  organization<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> IState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  organization<span class=\"token operator\">:</span> <span class=\"token string\">'fastfive'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>선언 병합은 주로 타입 선언 파일에서 사용됩니다.\n예를 들어, <em>lib.es5.d.ts</em> 에 선언되어 있는 Array 인터페이스가\n<em>lib.es2015.d.ts</em> 에 선언된 인터페이스를 병합하여\n보강될 수 있도록 하기 위함입니다. 결과적으로\n각 선언이 병합되어 전체 메서드를 가지는 하나의\nArray 타입을 얻게 됩니다.</p>\n<p>결론적으로, 복잡한 타입이라면 타입 별칭을 사용합니다. 그러나\n두 가지 방법으로 모두 표현할 수 있다면 일관성과 보강의 관점에서\n고려해봐야 합니다. 또한 합류하게 된 프로젝트의 코드 베이스의\n일관성을 지키기 위해 선택되어도 좋습니다.</p>\n<h2 id=\"5-any-타입은-타입-시스템을-무력화-시킨다\" style=\"position:relative;\"><a href=\"#5-any-%ED%83%80%EC%9E%85%EC%9D%80-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EB%AC%B4%EB%A0%A5%ED%99%94-%EC%8B%9C%ED%82%A8%EB%8B%A4\" aria-label=\"5 any 타입은 타입 시스템을 무력화 시킨다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. any 타입은 타입 시스템을 무력화 시킨다</h2>\n<p>any 타입은 점진적이며 선택적인 타입스크립트의 특성을 위한\n핵심 타입이지만, 타입 안정성이 없으며 설계를 감추고\n언어 서비스 또한 제공받지 못하게 만드는 강력한 힘을 가지고 있고,\n자바스크립트에서 표현할 수 있는 모든 값을 아우르는 매우\n큰 범위의 타입입니다.</p>\n<p>반대로 말하면, <strong>any는 더 구체적인 타입으로 대체할 수 있는\n가능성 또한 높습니다.</strong> 가령, 함수의 매개변수가 객체이긴 하지만\n값을 알 수 없다면 인덱스 시그니처를 사용하거나, 열거가\n가능한 객체임을 표현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">any <span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">}</span>;\nany <span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;</code></pre></div>\n<p>부득이하게 any를 사용해야 한다면, any 타입의 영향력이\n퍼져나가지 않도록 주의해야 합니다. 아래의 코드처럼\n<code class=\"language-text\">expressionReturningFoo</code>의 반환값을 <code class=\"language-text\">processBar</code> 의 매개변수로\n전달하기 위해 any를 사용한다면, any로 명시하는 것 보다는\n차라리 f2 처럼 사용처에서 단언하여 사용하는 것이 낫습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Foo\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//// Don't do this</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Prefer this</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>f1에서 x 타입은 <code class=\"language-text\">processBar</code> 호출 이후에도 여전히 any 타입인\n반면, f2는 사용처 영역에서만 any 타입으로 단언되어 호출 이후\nx 타입은 <code class=\"language-text\">Foo</code> 가 됩니다.</p>\n<p>만약 f1이 x를 반환하는 구조의 함수라면, any 타입의 영향력은\n함수 내부 뿐만 아니라 외부까지 퍼져나가게 되기 때문에\nany 타입의 적용 범위를 좁게 제한해야 합니다.</p>\n<h2 id=\"6-타입스크립트-기본형-타입과-객체-래퍼-타입은-다르다\" style=\"position:relative;\"><a href=\"#6-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%B3%B8%ED%98%95-%ED%83%80%EC%9E%85%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EB%9E%98%ED%8D%BC-%ED%83%80%EC%9E%85%EC%9D%80-%EB%8B%A4%EB%A5%B4%EB%8B%A4\" aria-label=\"6 타입스크립트 기본형 타입과 객체 래퍼 타입은 다르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 타입스크립트 기본형 타입과 객체 래퍼 타입은 다르다</h2>\n<p>자바스크립트는 일곱 가지 기본 타입(number, boolean, null,\nundefined, symbol, bigint)이 있습니다. 기본형들은\n불변이고 메서드를 가지고 있지 않다는 점에서 객체와 구분됩니다.</p>\n<p>하지만 기본형인 string은 메서드가 호출이 되어 마치 메서드를\n가지고 있는 것 처럼 보이지만, string의 메서드가 아닙니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'string'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"i\"</span></code></pre></div>\n<p>자바스크립트는 기본형과 객체 타입을 서로 자유롭게 변환하여\n기본형에서 charAt에 접근할 때, 자바스크립트는 <strong>기본형을\nString 객체로 래핑하고 메서드를 호출하고 래핑한 객체를\n버립니다.</strong> 이러한 동작으로 아래의 코드처럼 혼란을 가져오기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined</span></code></pre></div>\n<p>타입스크립트는 이러한 자바스크립트 동작을 위해\n기본형 타입과 객체 래퍼 타입을 구분지어 모델링합니다.\n즉, 기본형 타입과 객체 래퍼 타입은 다릅니다.</p>\n<p>하지만 string을 String으로 잘못 타이핑하기 쉽고, 실수를\n하더라도 아래의 코드처럼 잘 동작하는 것처럼 보일 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getStringLen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">getStringLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>그러나, string은 String에 할당할 수 있지만, String은\nstring에 할당할 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isSubString</span><span class=\"token punctuation\">(</span>subString<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//Argument of type 'String' is not assignable to parameter of type 'string'.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입스크립트가 제공하는 타입 선언은 전부 기본형 타입으로\n되어 있기 때문에 기본형 타입과 객체 래퍼 타입을\n혼동해서는 안되며, 기본형 타입을 사용해야 합니다.</p>\n<h2 id=\"7-잉여-속성-체크와-할당-가능-검사는-별도-과정이다\" style=\"position:relative;\"><a href=\"#7-%EC%9E%89%EC%97%AC-%EC%86%8D%EC%84%B1-%EC%B2%B4%ED%81%AC%EC%99%80-%ED%95%A0%EB%8B%B9-%EA%B0%80%EB%8A%A5-%EA%B2%80%EC%82%AC%EB%8A%94-%EB%B3%84%EB%8F%84-%EA%B3%BC%EC%A0%95%EC%9D%B4%EB%8B%A4\" aria-label=\"7 잉여 속성 체크와 할당 가능 검사는 별도 과정이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. ‘잉여 속성 체크’와 ‘할당 가능 검사’는 별도 과정이다</h2>\n<p>타입이 명시되어 있는 변수에 객체 리터럴을 할당한다면\n타입스크립트는 해당 타입의 속성이 있는 지, 그리고\n‘그 외의 속성은 없는지’ 확인합니다.</p>\n<p>타입이 명시되어 있는 변수에 명명된 속성의 매개변수 외의\n속성을 할당하려 한다면 오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span>\n  numDoors<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  ceilingHeightFt<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> r<span class=\"token operator\">:</span> Room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  numDoors<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  ceilingHeightFt<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  elephant<span class=\"token operator\">:</span> <span class=\"token string\">'present'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~ Object literal may only specify known properties,</span>\n  <span class=\"token comment\">//      and 'elephant' does not exist in type 'Room'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 구조적 타이핑 관점으로 생각해보면\nr은 구조적으로 Room 타입에 해당하는 속성을 모두\n가지고 있기 때문에 오류가 발생하지 않아야 합니다.</p>\n<p>다른 예시로, 임시 변수를 도입하여 Room 타입에 할당한다면\n오류가 발생하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span>\n  numDoors<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  ceilingHeightFt<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  numDoors<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  ceilingHeightFt<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  elephant<span class=\"token operator\">:</span> <span class=\"token string\">'present'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> r<span class=\"token operator\">:</span> Room <span class=\"token operator\">=</span> obj <span class=\"token comment\">// OK</span></code></pre></div>\n<p>타입스크립트는 <strong>타입 시스템의 구조적 본질을 해치지 않으면서,\n알 수 없는 객체 리터럴의 속성을 허용하지 않도록 하여\n구조적 타입 시스템에서 발생할 수 있는 중요한 오류를 잡을 수\n있도록 조건적으로 ‘잉여 속성 체크’를 진행합니다.</strong></p>\n<p>두 예제에 대입하여 생각해보면, 첫번 째 명명된 타입에 객체의 속성을 할당하는 경우\n구조적 시스템 관점에서 오류를 잡기 위해 ‘잉여 속성 체크’ 가 수행되었지만,\n두 번째 예시의 경우 조건에 따라 ‘잉여 속성 체크’가 수행되지 않았습니다.</p>\n<p>‘잉여 속성 체크’는 구조적 타이핑 시스템에서 허용되는\n속성 이름의 오타 같은 실수를 잡아내고, 선택적 필드를\n포함하는 타입에 특히 유용하지만, 적용 범위도 매우 제한적이고\n오직 객체 리터럴에서만 수행합니다.</p>\n<p>즉, ‘할당 가능 검사’와 조건적으로 동작하는 ‘잉여 속성 체크’는\n별도의 과정이라는 것을 인지하고 있어야 합니다.</p>\n<h2 id=\"8-타입-선언도-dry-원칙을-준수해야-한다\" style=\"position:relative;\"><a href=\"#8-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EB%8F%84-dry-%EC%9B%90%EC%B9%99%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"8 타입 선언도 dry 원칙을 준수해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 타입 선언도 DRY 원칙을 준수해야 한다</h2>\n<p>코드에서 반복되고 공유된 패턴을 제거하여 DRY(don’t repeat yourself)\n원칙을 준수하려고 노력합니다. 반면 타입 중복은 코드에 비해\n흔한 일입니다. <strong>타입 간에 매핑하는 방법을 익혀\n타입 정의에서도 DRY 원칙을 준수해야 합니다.</strong></p>\n<p>간단하게 타입의 이름을 붙이는 것으로 반복을 줄일 수 있습니다.\n이는 상수를 정의하고 사용하는 것과 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">=></span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDistance</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입 시그니처가 동일하다면, 시그니처 또한 명명된 타입으로 정의하여\n공유할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> get<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> post<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이미 존재하는 인터페이스를 확장해서 반복을 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> birth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date <span class=\"token punctuation\">}</span></code></pre></div>\n<p>제너릭 타입을 사용하여 중복을 제거할 수 있습니다.\n타입스크립트는 자주 사용되는 타입 변환을 모델링하여\n<a href=\"https://www.typescriptlang.org/ko/docs/handbook/utility-types.html\">유틸리티 타입</a>\n을 제공합니다.</p>\n<p>가령 다수의 중복된 속성을 가진 두 타입이 있다면,\nState의 속성을 인덱싱하여 topNavState를 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  pageContents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span>\n  pageTitle<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'pageTitle'</span><span class=\"token punctuation\">]</span>\n  recentFiles<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하거나, 여전히 남아있는 중복은 매핑된 타입으로\n중복을 제거할 수 있습니다. 이러한 패턴은 중복 제거에\n자주 등장하는 패턴이며 이를 모델링하여 타입스크립트는\n유틸리티 제너릭 타입 <a href=\"https://www.typescriptlang.org/ko/docs/handbook/utility-types.html#picktype-keys\">Pick</a>\n을 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'userId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pageTitle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> <span class=\"token string\">'userId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pageTitle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'recentFiles'</span><span class=\"token operator\">></span></code></pre></div>\n<p>반복적인 작업을 줄이기 위해 노력하는 만큼, 타입의 공간에서\n또한 반복을 주의해야 합니다.</p>\n<h2 id=\"9-객체의-숫자-키를-허용하고-문자열-키와-다르게-인식한다\" style=\"position:relative;\"><a href=\"#9-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%88%AB%EC%9E%90-%ED%82%A4%EB%A5%BC-%ED%97%88%EC%9A%A9%ED%95%98%EA%B3%A0-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%82%A4%EC%99%80-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%EC%9D%B8%EC%8B%9D%ED%95%9C%EB%8B%A4\" aria-label=\"9 객체의 숫자 키를 허용하고 문자열 키와 다르게 인식한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. 객체의 숫자 키를 허용하고 문자열 키와 다르게 인식한다</h2>\n<p>동적인 데이터에 대해서 인덱스 시그니처를 사용합니다. 인덱스 시그니처는 키, 값의\n타입의 조합입니다. 키의 왜 타입이 필요할까</p>\n<p>(아이템 16, 인덱스 시그니처)</p>\n<h2 id=\"9-타입-단언보다는-타입-선언을-하는-것이-낫다-후보\" style=\"position:relative;\"><a href=\"#9-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%84-%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%82%AB%EB%8B%A4-%ED%9B%84%EB%B3%B4\" aria-label=\"9 타입 단언보다는 타입 선언을 하는 것이 낫다 후보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. 타입 단언보다는 타입 선언을 하는 것이 낫다 (후보)</h2>\n<p>변수가 값을 할당하고 타입을 부여하려면 변수에 타입을 선언하여\n그 값이 선언된 타입임을 명시하거나,\n타입을 단언하여 타입스크립트가 추론한 타입이 있더라도\n단언한 타입으로 간주하는 두 방법을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> alice<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person</code></pre></div>\n<p>타입 선언은 할당되는 값이 해당 타입을 만족하는 지\n검사하지만, 타입 단언은 타입을 강제로 단언하여\n타입 체커에게 타입 오류가 있지만, 강제하여 무시하도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> alice<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span>\n  occupation<span class=\"token operator\">:</span> <span class=\"token string\">'Typescript developer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~ Object literal may only specify known properties</span>\n  <span class=\"token comment\">//       and 'occupation' does not exist in type 'Person'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span>\n  occupation<span class=\"token operator\">:</span> <span class=\"token string\">'Javascript developer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person <span class=\"token comment\">//No error</span></code></pre></div>\n<p>타입 단언을 사용하면 문제가 해결되는 것처럼 보이지만\n런타임에 문제가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jan'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//No error</span></code></pre></div>\n<p>일반적으로 단언문을 사용하지 않는 것이 변수를 선언하는 것이\n가장 직관적이며 타입 단언은 타입 체커가 추론한 타입보다\n개발자가 판단하는 타입이 더 정확할 때 유효합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#myButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token comment\">//타입은 EventTarget;</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token keyword\">as</span> HTMLButtonElement\n  button <span class=\"token comment\">//타입은 HTMLButtonElement;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"typescript-checklist-you-should-know","date":"June 14, 2022"}}},"pageContext":{"slug":"/typescript/typescript-checklist-you-should-know/","previous":{"fields":{"slug":"/web/stale-while-ravalidate/"},"frontmatter":{"title":"stale-while-revalidate 전략은 어떻게 활용되고 있을까"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}